var l={UNEXPECTED:"@vercel/edge-config: Unexpected error",UNAUTHORIZED:"@vercel/edge-config: Unauthorized",NETWORK:"@vercel/edge-config: Network error",EDGE_CONFIG_NOT_FOUND:"@vercel/edge-config: Edge Config not found"};function y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function R(e,t){let n={};return t.forEach(r=>{n[r]=e[r]}),n}function w(e){if(typeof e!="string")throw new Error("@vercel/edge-config: Expected key to be a string")}function x(e){if(!Array.isArray(e)||e.some(t=>typeof t!="string"))throw new Error("@vercel/edge-config: Expected keys to be an array of string")}function T(e){return typeof structuredClone=="function"?structuredClone(e):e===void 0?e:JSON.parse(JSON.stringify(e))}function E(e){try{let t=new URL(e);if(t.host!=="edge-config.vercel.com"||t.protocol!=="https:"||!t.pathname.startsWith("/ecfg"))return null;let n=t.pathname.split("/")[1];if(!n)return null;let r=t.searchParams.get("token");return!r||r===""?null:{id:n,token:r}}catch{return null}}var i=new Map;async function O(e,t={}){let{headers:n=new Headers,...r}=t,g=n.get("Authorization"),c=`${e},${g||""}`,a=i.get(c);if(a){let{etag:h,response:u}=a,d=new Headers(n);d.set("If-None-Match",h);let s=await fetch(e,{...r,headers:d});if(s.status===304)return s.cachedResponseBody=JSON.parse(u),s;let f=s.headers.get("ETag");return s.ok&&f&&i.set(c,{etag:f,response:await s.clone().text()}),s}let o=await fetch(e,t),p=o.headers.get("ETag");return o.ok&&p&&i.set(c,{etag:p,response:await o.clone().text()}),o}export{l as a,y as b,R as c,w as d,x as e,T as f,E as g,O as h};
