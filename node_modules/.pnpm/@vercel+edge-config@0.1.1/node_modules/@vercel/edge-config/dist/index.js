function p(e,n){return Object.prototype.hasOwnProperty.call(e,n)}function w(e,n){let s={};return n.forEach(f=>{s[f]=e[f]}),s}function c(e){if(typeof e!="string")throw new Error("@vercel/edge-config: Expected key to be a string")}function h(e){if(!Array.isArray(e)||e.some(n=>typeof n!="string"))throw new Error("@vercel/edge-config: Expected keys to be an array of string")}var o={UNEXPECTED:"@vercel/edge-config: Unexpected error",UNAUTHORIZED:"@vercel/edge-config: Unauthorized",NETWORK:"@vercel/edge-config: Network error",EDGE_CONFIG_NOT_FOUND:"@vercel/edge-config: Edge Config not found"};function l(e){return typeof structuredClone=="function"?structuredClone(e):e===void 0?e:JSON.parse(JSON.stringify(e))}function T(e){try{let n=new URL(e);if(n.host!=="edge-config.vercel.com"||n.protocol!=="https:"||!n.pathname.startsWith("/ecfg"))return null;let s=n.pathname.split("/")[1];if(!s)return null;let f=n.searchParams.get("token");return!f||f===""?null:{id:s,token:f}}catch{return null}}async function a(e){if(typeof EdgeRuntime=="string")return null;let n=await import(/* webpackIgnore: true */["fs","promises"].join("/"));try{let s=await n.readFile(`/opt/edge-config/${e}.json`,"utf-8");return JSON.parse(s)}catch{return null}}function m(e){if(!e)throw new Error("@vercel/edge-config: No connection string provided");let n=T(e);if(!n)throw new Error("@vercel/edge-config: Invalid connection string provided");let s=`https://edge-config.vercel.com/${n.id}`,f="1",u={Authorization:`Bearer ${n.token}`},t;return{async get(r){return typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await a(n.id)),t)?(c(r),Promise.resolve(l(t.items[r]))):(c(r),fetch(`${s}/item/${r}?version=${f}`,{headers:u}).then(async i=>{if(i.status===401)throw new Error(o.UNAUTHORIZED);if(i.status===404){if(i.headers.has("x-edge-config-digest"))return;throw new Error(o.EDGE_CONFIG_NOT_FOUND)}if(i.ok)return i.json();throw new Error(o.UNEXPECTED)},()=>{throw new Error(o.NETWORK)}))},async has(r){return typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await a(n.id)),t)?(c(r),Promise.resolve(p(t.items,r))):(c(r),fetch(`${s}/item/${r}?version=${f}`,{method:"HEAD",headers:u}).then(i=>{if(i.status===401)throw new Error(o.UNAUTHORIZED);if(i.status===404){if(i.headers.has("x-edge-config-digest"))return!1;throw new Error(o.EDGE_CONFIG_NOT_FOUND)}if(i.ok)return!0;throw new Error(o.UNEXPECTED)},()=>{throw new Error(o.NETWORK)}))},async getAll(r){if(typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await a(n.id)),t))return r===void 0?Promise.resolve(l(t.items)):(h(r),Promise.resolve(l(w(t.items,r))));Array.isArray(r)&&h(r);let i=Array.isArray(r)?new URLSearchParams(r.map(d=>["key",d])).toString():null;return i===""?Promise.resolve({}):fetch(`${s}/items?version=${f}${i===null?"":`&${i}`}`,{headers:u}).then(async d=>{if(d.status===401)throw new Error(o.UNAUTHORIZED);if(d.status===404)throw new Error(o.EDGE_CONFIG_NOT_FOUND);if(d.ok)return d.json();throw new Error(o.UNEXPECTED)},()=>{throw new Error(o.NETWORK)})},async digest(){return typeof EdgeRuntime!="string"&&process.env.AWS_LAMBDA_FUNCTION_NAME&&(t===void 0&&(t=await a(n.id)),t)?Promise.resolve(t.digest):fetch(`${s}/digest?version=1`,{headers:u}).then(r=>{if(!r.ok)throw new Error(o.UNEXPECTED);return r.json()},()=>{throw new Error(o.NETWORK)})}}}var g;function E(){g||(g=m(process.env.EDGE_CONFIG))}var N=(...e)=>(E(),g.get(...e)),C=(...e)=>(E(),g.getAll(...e)),y=(...e)=>(E(),g.has(...e)),_=(...e)=>(E(),g.digest(...e));export{m as createClient,_ as digest,N as get,C as getAll,y as has,T as parseConnectionString};
